{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["MovieGenre","genre","className","MoviePoster","image","alt","src","title","Movie","console","log","this","props","genres","map","index","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","App","state","_renderMovie","movies","movie","title_english","small_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAuDA,SAASA,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,sBAAMC,UAAU,eAAhB,SAAgCD,IAKxC,SAASE,EAAT,GAAkC,IAAZC,EAAW,EAAXA,MAAMC,EAAK,EAALA,IACxB,OACI,qBAAKC,IAAKF,EAAOC,IAAKA,EAAKE,MAAOF,IAW3BG,M,4JA7DX,WAEI,OADAC,QAAQC,IAAIC,KAAKC,OAEb,qCACA,qBAAKV,UAAU,iBAAf,SACI,cAACC,EAAD,CAAaC,MAAOO,KAAKC,MAAMR,MAAOC,IAAKM,KAAKC,MAAML,UAE1D,sBAAKL,UAAU,iBAAf,UACI,6BAAKS,KAAKC,MAAML,QAChB,qBAAKL,UAAU,gBAAf,SACKS,KAAKC,MAAMC,OAAOC,KAAI,SAACb,EAAMc,GAAP,OAAe,cAACf,EAAD,CAAYa,OAAQZ,SAE9D,qBAAKC,UAAU,kBAAf,SACI,cAAC,IAAD,CACAc,KAAML,KAAKC,MAAMK,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,wB,GA3BRC,aC8FLC,E,4MAnFbC,MAAM,G,EAsCNC,aAAe,WAUb,OATe,EAAKD,MAAME,OAAOZ,KAAI,SAACa,EAAMZ,GAC1C,OAAO,cAAC,EAAD,CACPR,MAAOoB,EAAMC,cACbxB,MAAOuB,EAAME,kBACbhB,OAAQc,EAAMd,OAEdI,SAAUU,EAAMV,UADXU,EAAMG,Q,EAShBC,W,sBAAc,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLP,EADK,OAGX,EAAKQ,SAAS,CACZR,WAJS,2C,EAQbO,SAAW,WAET,OAAOE,MAAM,0DACZC,MAAK,SAAAC,GAAQ,OAEZA,EAASC,UAEVF,MAAK,SAAAE,GAAI,OAAEA,EAAKC,KAAKb,UACrBc,OAAM,SAAAC,GAAG,OAAEhC,QAAQC,IAAI,Y,uDAjE1B,WACEC,KAAKoB,e,oBAmEP,WACE,OACA,qBAAK7B,UAAWS,KAAKa,MAAME,OAAS,MAAQ,eAA5C,SAEGf,KAAKa,MAAME,OAASf,KAAKc,eAAiB,gB,GA9E/BH,aCFHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49ebb2ed.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport propTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component{\r\n    \r\n    //부모요소에게서 받는 prop을 체크\r\n    static propTypes ={\r\n        title:propTypes.string.isRequired,\r\n        image:propTypes.string.isRequired,\r\n        genres:propTypes.array.isRequired,\r\n        synopsis:propTypes.string.isRequired,\r\n    }\r\n    render(){\r\n        console.log(this.props)\r\n        return(\r\n            <>\r\n            <div className=\"movie__Columns\">\r\n                <MoviePoster image={this.props.image} alt={this.props.title}/>\r\n            </div>\r\n            <div className=\"movie__Columns\">           \r\n                <h1>{this.props.title}</h1>\r\n                <div className=\"movie__Genres\">\r\n                    {this.props.genres.map((genre,index)=><MovieGenre genres={genre}/>)}\r\n                </div>\r\n                <div className=\"movie__Synopsis\">\r\n                    <LinesEllipsis \r\n                    text={this.props.synopsis} \r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'                    \r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\nclass MoviePoster extends Component{\r\n    static propTypes ={\r\n        image:propTypes.string.isRequired,\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <img src={this.props.image} alt=\"\"/>\r\n        )\r\n    }\r\n}\r\n*/\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n//state필요없고 리턴만 할경우..only..props받고..\r\nfunction MoviePoster({image,alt}){\r\n    return(\r\n        <img src={image} alt={alt} title={alt}/>\r\n    )   \r\n}\r\n\r\nMovieGenre.propTypes={\r\n    genres:propTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes={\r\n    image:propTypes.string\r\n}\r\n\r\nexport default Movie;","import React,{Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n/*라이프사이클\nRender:componentWillMount > render > componentDidmount\nUpdate:componentWillReceiveProps > shouldComponentUpdate (이전 props가 다르면? 리액트는 true반환) >\ncomponentWillUpdate > render > componentDidUpdate \n*/\n\n//state가 바뀌면 render 실행\n\nclass App extends Component {\n  \n  state={\n\n  }\n\n  componentDidMount(){\n    this._getMovies()\n\n\n    /*setTimeout(()=>{\n      this.setState({\n        /*\n        movies:[\n          ...this.state.movies,//기존꺼 그대로 두고 한개만 추가\n          {\n            title:'abouttime',\n            image:'https://cdn.joongboo.com/news/photo/201902/1325883_2033592_4853.jpg'\n          }            \n        ]\n        */    \n        /*    \n        movies: [\n          {\n            title:'lalaland',\n            image:'https://t1.daumcdn.net/movie/0e371de6f342a66143c49af3dd2b204342bbb5aa'\n          },\n          {\n            title:'harryporter',\n            image:'https://images.christiandaily.co.kr/data/images/full/68175/image.jpg?w=600'\n          },\n          {\n            title:'abouttime',\n            image:'https://cdn.joongboo.com/news/photo/201902/1325883_2033592_4853.jpg'\n          }    \n        ]          \n      })\n    },5000)*/\n  }\n\n  _renderMovie = () => {\n    const movies = this.state.movies.map((movie,index)=>{\n      return <Movie \n      title={movie.title_english} \n      image={movie.small_cover_image} \n      genres={movie.genres} \n      key={movie.id}\n      synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  //asynnchronous 는 순서와 상관없이 진행\n  //await 은 끝나기를 기다린다-> callApi이 작업이 완료되고 리턴하기를!\n _getMovies =  async () =>{\n    const movies = await this._callApi();\n    //setState는 callApi 작업이 완료되기 전까지 실행x\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () =>{\n    //promise \n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=raiting')\n    .then(response=>\n      // console.log(response)\n      response.json()//json 으로 변환\n      )//패치가 완료되면 작업수행 , 요소 한개가 들어옴\n    .then(json=>json.data.movies)//요게 리턴값으로..!\n    .catch(err=>console.log('err!'))//오류나면 캐치해서 오류알려줘\n  }\n\n  render(){\n    return (\n    <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n\n      {this.state.movies ? this._renderMovie() : 'loading'}\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}